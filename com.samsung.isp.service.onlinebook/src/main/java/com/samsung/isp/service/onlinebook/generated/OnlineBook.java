// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `onlinebook.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.samsung.isp.service.onlinebook.generated;

/**
 * 在线书店接口
 **/
public interface OnlineBook extends com.zeroc.Ice.Object
{
    /**
     * 订书
     * @param current The Current object for the invocation.
     **/
    TickRST bookTick(Message msg, com.zeroc.Ice.Current current);

    /**
     * 获取作者列表
     * @param current The Current object for the invocation.
     **/
    java.util.List<com.samsung.isp.service.onlinebook.entity.Person> getAuthors(com.zeroc.Ice.Current current);

    /**
     * 获取消息映射表
     * @param current The Current object for the invocation.
     **/
    java.util.Map<java.lang.Long, Message> getMsgMap(com.zeroc.Ice.Current current);

    static final String[] _iceIds =
    {
        "::Ice::Object",
        "::generated::OnlineBook"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::generated::OnlineBook";
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_bookTick(OnlineBook obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        final com.zeroc.IceInternal.Holder<Message> icePP_msg = new com.zeroc.IceInternal.Holder<>();
        istr.readValue(v -> icePP_msg.value = v, Message.class);
        istr.readPendingValues();
        inS.endReadParams();
        Message iceP_msg = icePP_msg.value;
        TickRST ret = obj.bookTick(iceP_msg, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        TickRST.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getAuthors(OnlineBook obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        java.util.List<com.samsung.isp.service.onlinebook.entity.Person> ret = obj.getAuthors(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        AuthorListHelper.write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getMsgMap(OnlineBook obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        java.util.Map<java.lang.Long, Message> ret = obj.getMsgMap(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        MsgMapHelper.write(ostr, ret);
        ostr.writePendingValues();
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    final static String[] _iceOps =
    {
        "bookTick",
        "getAuthors",
        "getMsgMap",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping"
    };

    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceDispatch(com.zeroc.IceInternal.Incoming in, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        int pos = java.util.Arrays.binarySearch(_iceOps, current.operation);
        if(pos < 0)
        {
            throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return _iceD_bookTick(this, in, current);
            }
            case 1:
            {
                return _iceD_getAuthors(this, in, current);
            }
            case 2:
            {
                return _iceD_getMsgMap(this, in, current);
            }
            case 3:
            {
                return com.zeroc.Ice.Object._iceD_ice_id(this, in, current);
            }
            case 4:
            {
                return com.zeroc.Ice.Object._iceD_ice_ids(this, in, current);
            }
            case 5:
            {
                return com.zeroc.Ice.Object._iceD_ice_isA(this, in, current);
            }
            case 6:
            {
                return com.zeroc.Ice.Object._iceD_ice_ping(this, in, current);
            }
        }

        assert(false);
        throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
    }
}
